// Mocks generated by Mockito 5.1.0 from annotations
// in scot_api/test/scot_api_client_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;
import 'dart:convert' as _i6;
import 'dart:typed_data' as _i7;

import 'package:http/src/base_request.dart' as _i8;
import 'package:http/src/client.dart' as _i4;
import 'package:http/src/response.dart' as _i2;
import 'package:http/src/streamed_response.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeResponse_0 extends _i1.Fake implements _i2.Response {}

class _FakeStreamedResponse_1 extends _i1.Fake implements _i3.StreamedResponse {
}

class _FakeUri_2 extends _i1.Fake implements Uri {}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i4.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i5.Future<_i2.Response>);
  @override
  _i5.Future<_i2.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i5.Future<_i2.Response>);
  @override
  _i5.Future<_i2.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i6.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i5.Future<_i2.Response>);
  @override
  _i5.Future<_i2.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i6.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i5.Future<_i2.Response>);
  @override
  _i5.Future<_i2.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i6.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i5.Future<_i2.Response>);
  @override
  _i5.Future<_i2.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i6.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i5.Future<_i2.Response>);
  @override
  _i5.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
  @override
  _i5.Future<_i7.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: Future<_i7.Uint8List>.value(_i7.Uint8List(0)))
          as _i5.Future<_i7.Uint8List>);
  @override
  _i5.Future<_i3.StreamedResponse> send(_i8.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue:
                  Future<_i3.StreamedResponse>.value(_FakeStreamedResponse_1()))
          as _i5.Future<_i3.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
}

/// A class which mocks [Response].
///
/// See the documentation for Mockito's code generation for more information.
class MockResponse extends _i1.Mock implements _i2.Response {
  MockResponse() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Uint8List get bodyBytes =>
      (super.noSuchMethod(Invocation.getter(#bodyBytes),
          returnValue: _i7.Uint8List(0)) as _i7.Uint8List);
  @override
  String get body =>
      (super.noSuchMethod(Invocation.getter(#body), returnValue: '') as String);
  @override
  int get statusCode =>
      (super.noSuchMethod(Invocation.getter(#statusCode), returnValue: 0)
          as int);
  @override
  Map<String, String> get headers =>
      (super.noSuchMethod(Invocation.getter(#headers),
          returnValue: <String, String>{}) as Map<String, String>);
  @override
  bool get isRedirect =>
      (super.noSuchMethod(Invocation.getter(#isRedirect), returnValue: false)
          as bool);
  @override
  bool get persistentConnection =>
      (super.noSuchMethod(Invocation.getter(#persistentConnection),
          returnValue: false) as bool);
}

/// A class which mocks [Uri].
///
/// See the documentation for Mockito's code generation for more information.
class MockUri extends _i1.Mock implements Uri {
  MockUri() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get scheme =>
      (super.noSuchMethod(Invocation.getter(#scheme), returnValue: '')
          as String);
  @override
  String get authority =>
      (super.noSuchMethod(Invocation.getter(#authority), returnValue: '')
          as String);
  @override
  String get userInfo =>
      (super.noSuchMethod(Invocation.getter(#userInfo), returnValue: '')
          as String);
  @override
  String get host =>
      (super.noSuchMethod(Invocation.getter(#host), returnValue: '') as String);
  @override
  int get port =>
      (super.noSuchMethod(Invocation.getter(#port), returnValue: 0) as int);
  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  String get query =>
      (super.noSuchMethod(Invocation.getter(#query), returnValue: '')
          as String);
  @override
  String get fragment =>
      (super.noSuchMethod(Invocation.getter(#fragment), returnValue: '')
          as String);
  @override
  List<String> get pathSegments =>
      (super.noSuchMethod(Invocation.getter(#pathSegments),
          returnValue: <String>[]) as List<String>);
  @override
  Map<String, String> get queryParameters =>
      (super.noSuchMethod(Invocation.getter(#queryParameters),
          returnValue: <String, String>{}) as Map<String, String>);
  @override
  Map<String, List<String>> get queryParametersAll =>
      (super.noSuchMethod(Invocation.getter(#queryParametersAll),
          returnValue: <String, List<String>>{}) as Map<String, List<String>>);
  @override
  bool get isAbsolute =>
      (super.noSuchMethod(Invocation.getter(#isAbsolute), returnValue: false)
          as bool);
  @override
  bool get hasScheme =>
      (super.noSuchMethod(Invocation.getter(#hasScheme), returnValue: false)
          as bool);
  @override
  bool get hasAuthority =>
      (super.noSuchMethod(Invocation.getter(#hasAuthority), returnValue: false)
          as bool);
  @override
  bool get hasPort =>
      (super.noSuchMethod(Invocation.getter(#hasPort), returnValue: false)
          as bool);
  @override
  bool get hasQuery =>
      (super.noSuchMethod(Invocation.getter(#hasQuery), returnValue: false)
          as bool);
  @override
  bool get hasFragment =>
      (super.noSuchMethod(Invocation.getter(#hasFragment), returnValue: false)
          as bool);
  @override
  bool get hasEmptyPath =>
      (super.noSuchMethod(Invocation.getter(#hasEmptyPath), returnValue: false)
          as bool);
  @override
  bool get hasAbsolutePath => (super
          .noSuchMethod(Invocation.getter(#hasAbsolutePath), returnValue: false)
      as bool);
  @override
  String get origin =>
      (super.noSuchMethod(Invocation.getter(#origin), returnValue: '')
          as String);
  @override
  bool isScheme(String? scheme) =>
      (super.noSuchMethod(Invocation.method(#isScheme, [scheme]),
          returnValue: false) as bool);
  @override
  String toFilePath({bool? windows}) => (super.noSuchMethod(
      Invocation.method(#toFilePath, [], {#windows: windows}),
      returnValue: '') as String);
  @override
  Uri replace(
          {String? scheme,
          String? userInfo,
          String? host,
          int? port,
          String? path,
          Iterable<String>? pathSegments,
          String? query,
          Map<String, dynamic>? queryParameters,
          String? fragment}) =>
      (super.noSuchMethod(
          Invocation.method(#replace, [], {
            #scheme: scheme,
            #userInfo: userInfo,
            #host: host,
            #port: port,
            #path: path,
            #pathSegments: pathSegments,
            #query: query,
            #queryParameters: queryParameters,
            #fragment: fragment
          }),
          returnValue: _FakeUri_2()) as Uri);
  @override
  Uri removeFragment() =>
      (super.noSuchMethod(Invocation.method(#removeFragment, []),
          returnValue: _FakeUri_2()) as Uri);
  @override
  Uri resolve(String? reference) =>
      (super.noSuchMethod(Invocation.method(#resolve, [reference]),
          returnValue: _FakeUri_2()) as Uri);
  @override
  Uri resolveUri(Uri? reference) =>
      (super.noSuchMethod(Invocation.method(#resolveUri, [reference]),
          returnValue: _FakeUri_2()) as Uri);
  @override
  Uri normalizePath() =>
      (super.noSuchMethod(Invocation.method(#normalizePath, []),
          returnValue: _FakeUri_2()) as Uri);
}
